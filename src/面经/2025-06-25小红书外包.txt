一面 30min
1.自我介绍

2.介绍下现在项目中的登录链路；
token失效怎么检测----后端接口约定状态码，表示登录过期；
失效后跳转登录页，登录后会回到之前的页面吗；
如果用户关闭浏览器后，希望再次登录时候，不回到之前的页面，而是进入首页，怎么做？
如果希望具体一段时候后，再次登录就进入首页，而不是之前的页面，怎么做，cookie可以吗？【cookie可以设置有效期，过了有效期后，浏览器自动删除】

3.介绍下之前更有点复杂度的项目

4.路由懒加载是什么样的概念。实现机制是什么样的。怎么判断动态加载的js已经加载完了。
/* webpackChunkName: "login" */ 可以自定义chunk名称
目的：提升页面加载性能、用户体验；首次加载的包体积更小。需要的时候才动态加载。有利于缓存优化（没改动hash值不变）
写法：动态() => import('xxx'),Webpack 遇到 import() 就会自动打成异步 chunk。
打包后产物：__webpack_require__.e("module-b").then(__webpack_require__.bind(null, "./B.js"));
__webpack_require__会动态创建script标签，返回一个promise,script onload之后resolve,或者onerror之后reject.
可以添加超时逻辑，通过Promise.race来处理。

5.遇到过哪些浏览器兼容问题。
遇到页面卡顿排查思路是怎么样的？
性能面板中能看到某个函数的执行时长吗？具体有哪些信息？

帧 中，看是否有红色方块，红色即为掉帧。如果一帧内不能完成 JS 执行 + 布局 + 渲染 → 该帧就会被丢弃
掉帧可能原因：长任务(拆分、分片)，批量操作dom，动画利用GPU加速；
在main（主要），下面。可以查看任务块中的，存在红色块，即为长任务。
选中。可以在bottom-up或者call tree中查看时间日志，耗时时长，选中之后，可以显示对应的调用堆栈。进行源码分析。

想快速找出哪个函数最耗时 → 用 Bottom-Up。
想理清调用链，找出导致瓶颈的根源函数和调用路径 → 用 Call Tree。

6.nodejs记录异常监控，全链路打通了吗
前端打包生成sourcemap，但是sourcemap文件只传到nodejs那边去。
借助于source-map解析出对应源码中哪一个位置。
结合代码编辑器组件，直接跳转到指定位置的源码处。（在线仓库也行。）【可以根据tag或者branch来跳转指定位置】

7.jest如何测试渲染后dom位置是否正确。

8.有什么要问我的？