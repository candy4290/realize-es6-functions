1.meta标签的几种用法
    定义：meta是元数据元素，表示文档的描述信息。
    1>如果设置了name，则提供了文档级别的元数据，应用于整个页面。<meta name="viewport" content="width=device-width,initial-scale=1" />
    2>如果设置了http-equiv，则是编译指令，与类似命名的HTTP头部相同。<meta http-equiv="cache-control" content="no-cache" />
    3>如果设置了charset，则是一个字符集申明，告诉文档使用了哪种字符编码。<meta charset="utf-8" />

2.DomContentLoaded与load区别；
    DomContentLoaded在HTML文档完全解析及所有延迟脚本(<script defer src="xxx" />和<script type="module" />)下载和执行完成后触发。
    不用等待异步脚本、图片、子框架等其他内容加载完。
    load事件需要等待所有依赖资源如样式表和图片都加载完才触发。

3.scritp标签async与defer有什么区别
    async:异步脚本，请求获取脚本时，不会阻塞页面解析；先下载完成的先执行，无法保证顺序；获取到后立即执行，执行期间会阻塞HTML解析。用于不需要进行DOM操作的脚本，如站长统计之类
    defer:延迟脚本，请求获取脚本时，不会阻塞页面解析；等全部下载完成后，按HTML中出现的顺序执行；等HTML解析完成后才会执行。用于需要进行DOM操作的脚本。
    只对外联的脚本生效，如果是内联的脚本，设置async或者defer均无效。
如果同时设置了async和defer,执行async。

4.link标签引入外部css是否会阻塞页面解析、渲染；是否会阻塞js下载及执行。
    link标签不会阻塞解析，但是会阻塞渲染(如果link标签放在body标签前面的话)，会阻塞后面JS的执行。
    如果link标签后没有script标签，则立即触发DomContentLoaded事件。否则，会阻塞js脚本，也就阻塞了DomContentLoaded事件。
    如果加上media="print",<link rel="stylesheet" href="xxx" media="print" />是非阻塞渲染的。

5.从输入URL到页面显示发生了什么【HTTP】
    1>DNS解析
    2>TCP握手，建立连接
    3>返回数据
    4>解析
        DOM树：
		DOM树解析全过程补充：https://github.com/pro-collection/interview-question/issues/490
	从上往下逐行解析，将文档分解为一系列的标记（tokens）
	解析器根据标记构建dom节点，并将这些节点链接到树形结构中。每个标记对应一个DOM节点。
	根据标记的嵌套关系，将构建的DOM节点连接成一个树状结构。
	当解析器遇到css\js脚本时，会调用相关的解析器或执行器来处理并应用样式和脚本。

	遇到同步脚本，会立即执行js，阻塞解析。
	遇到异步脚本，会进行请求，不会阻塞解析。但请求结束后，立马执行js，会阻塞解析
	遇到延迟脚本，会进行请求，不会阻塞解析。直到解析完成后，才会执行JS。

        CSSOM树
        渲染树
    5>渲染
        布局、绘制

    预加载扫描器，可以提前将需要请求的资源进行请求，不用等html解析器到达这里时才进行请求，提供的优化减少了阻塞。
    关键渲染路径：DOM树、cssOM树、渲染树、布局、绘制
    优化关键渲染路径：
        1>通过异步、延迟加载或者消除非关键资源来减少关键资源的请求数量 
        2>优化必须的请求数量和每个请求的文件体积 
        3>通过区分关键资源的优先级来优化被加载关键资源的顺序，来缩短关键路径长度。

6.回流（重排）与重绘，如何减少回流
    回流必导致重绘，重绘未必会回流。
    回流：初次渲染或者位置大小发生变化。或者是读取了clientWidth,offsetWidth,scrollWidth等属性
    重绘：不改变位置大小。比如颜色变化。
    减少回流和重绘：使用element.style.cssText或者提供class类名来合并样式修改；脱离文档流（使用absolute或者fixed布局）
    减少重绘：如上下跳动的css动画，原本通过改变top值来实现。现在通过transform:translateY(xxx)来实现。【translate利用gpu加速，不会导致重绘】

7.JSONP跨域原理
    利用script标签可以加载跨域资源，数据被当做js代码返回，并会自动执行。

8.性能指标
  0.1【导航阶段】TTFB（Time to first byte），首字节时间，浏览器收到服务器响应的第一个字节所花费的时间。(发出请求，到收到第一个字节响应的时间)
    TTFB=DNS 查询时间 + TCP 连接时间 + 服务器处理时间 + 响应传输时间

  1.1.【渲染阶段】 FP（First Paint），首次渲染时间，浏览器将DOM树和CSSOM树合并，开始绘制页面的时间（首次绘制像素到屏幕上的时间，通常是指页面上的第一个非白色像素点）
    const observer = new PerformanceObserver((entryList) => {
    for (const entry of entryList.getEntries()) {
        if (entry.name === 'first-paint') {
        console.log('First Paint Time:', entry.startTime);
        }
    }
    });
    observer.observe({ type: 'paint', buffered: true });

  1.2.【渲染阶段】 FCP（First Contentful Paint），首次内容绘制时间，页面首次有可见内容被绘制的时间（首次绘制任何有内容的像素到屏幕上的时间）
  1.3.【渲染阶段】 LCP（Largest Contentful Paint），页面上最大内容块绘制到屏幕上的时间（）

  2.1.【交互阶段】 FID，首次输入延迟时间，用户首次与页面进行交互（点击按钮、输入框等）后，页面响应交互的时间
  2.2.【交互阶段】 TTI（Time to Interactive），首次可交互时间，页面变得完全可交互（用户可以进行大部分常规操作）所花费的时间

9.字体未加载完时，text文本是否会显示出来
    font-display:block 渲染文本不可见知道字体文件加载完成。
    font-display:swap 先展示默认字体，等加载好了后，展示正确的字体。

10.如果cookie 没有设置 maxage， 那么这一条 cookie 失效时间改怎么算
如果 Cookie 没有设置 max-age，它通常被视为会话 Cookie（Session）其失效时间的计算方式如下：

一、会话 Cookie 的失效时间
浏览器关闭时：一般情况下，当用户关闭浏览器时，会话 Cookie 会被删除。这意味着只要浏览器处于打开状态，并且用户在与同一个网站进行交互，会话 Cookie 就会一直有效。
例如，你在浏览一个在线购物网站时，登录后服务器设置了一个未设置 max-age 的 Cookie 用于标识你的登录状态。只要你不关闭浏览器，这个 Cookie 就会一直有效，让你在不同页面之间切换时保持登录状态。但是一旦你关闭浏览器（不是关闭标签页哦~），再次打开并访问该网站时，你可能需要重新登录，因为会话 Cookie 已经被删除。
特殊情况：有些浏览器可能会在一段时间内保留会话 Cookie，以便在用户重新打开浏览器时恢复会话状态。然而，这种行为并不是标准的，不同的浏览器可能有不同的处理方式。

11.Attribute与Property区别
对比项	            Attribute（HTML 属性）	            Property（DOM 属性）
定义位置	        在 HTML 代码中	                    在 JavaScript 代码中
数据类型	        只能是字符串	                     可以是字符串、布尔、对象等
初始值	            决定 DOM Property 的初始值	         反映元素的当前状态
修改方式	        通过setAttribute、removeAttribute	直接修改对象属性
与JavaScript交互	不会自动同步 DOM 属性	会动态更新

12.同源策略
是浏览器的策略。
至于浏览器是否收到了真正的请求，并进行了逻辑处理，分为以下两种情况：

1>简单请求：一口气发→服务端收→脚本拿不到响应（若无 CORS 头）。
2>复杂请求：先预检→服务端收预检→若允许再发正式请求→服务端收正式请求→脚本拿不到响应（若无 CORS 头）。

会触发预检请求的情况：
首先必须是跨域请求。
其次：
1>请求方法：PUT、DELETE请求
2>不是简单请求头：请求头带了自定义头，如 Authorization、X-Token
3>Content-Type: application/json

13.XSS（Cross-Site Scripting，跨站脚本攻击）
含义：攻击者将恶意脚本代码注入网站页面中，当用户访问时，这段脚本在用户的浏览器中执行，从而窃取敏感信息、劫持会话、控制页面行为等。

类型 | 描述
存储型 XSS | 恶意代码被存储在数据库或页面中，用户访问页面时触发
反射型 XSS | 恶意代码作为 URL 参数传递，页面直接读取并输出
DOM 型 XSS | 发生在前端 JS 操作 DOM 时，没有做安全处理，例如 innerHTML 等

防御措施：
1>特殊字符转义
2>cookie设置为HttpOnly

14.XSRF(Cross-Site Request Forgery，跨站请求伪造)
含义：攻击者诱导用户在登录状态下，向目标网站发起非本意的请求，从而达到非法操作目的（本质就是在目标网页登录状态下，在伪造网页向目标网页发起请求,利用已登录的cookie）。
防疫措施：
1>使用CSRF Token
2>Cookie设置SameSite=Strict
3>后端检查header头中的Referer、Origin