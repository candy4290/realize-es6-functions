0.自我介绍。
您好，我叫陈小祥，17年毕业从事前端开发工作。一共有八年工作经验，其中有三年时间在用angular4-9从事开发，4年React开发时间16-18版本。
vue2.x有一年多开发时间。中间穿插了小程序、混合移动端开发。主要从事的行业是金融、政府两个方向。以toB业务为主，也有部分toC的。

工作中除了日常业务功能开发，还在兼顾一部分，
小工具的开发，比如脚手架、通用组件封装、团队提效工具(GIS工具)、瓦片下载工具、离线演示版本工具(nodejs，极简版产品演示工具)。

1.写的一个比较满意的组件【单一职责、低耦合高内聚、可扩展、可测试、文档+在线可调试示例】
d3.js关系图谱
  1>对外隐藏内部实现细节
  2>提供入参控制展示形态
  3>对外暴露函数或者属性
  4>jest测试【边界情况、下次改动不会影响之前的逻辑】
  5>纯组件（ant design圣诞节下雪效果事件）
手势解锁
  1>只负责绘制，是否成功、失败交给调用者自行决定

2.为何选择react而不是vue
  1>github star数量（流行程度、使用人数）
  2>更新频率与更新升级陡峭程度（以后的迁移成本）
  3>社区生态
  4>团队成员技术情况（比如ts\js,状态管理方案等）
  5>上手成本评估

3.项目中遇到过哪些映像深刻的问题。
1>react列表的key问题，比如展开，收起的状态。
提取到父组件->key使用索引错位问题->key需要使用一个稳定值
2>列表卡顿，虚拟滚动，树形结构虚拟滚动
3>前端导出excel,使用webworker,避免卡顿
4>懒加载
5>大批量数据，利用pako压缩。利用get请求，缓存。geoserver。
6>请求体过大、nginx用户没有proxy_temp的写入权限。请求路径过 长。rtmp转发视频流不能用http代理。
7>幽灵依赖导致的问题，幽灵依赖：指的是项目中未在 dependencies 或 devDependencies 声明，但由于各种原因依然能够在运行或开发中被访问的依赖
npx depcheck,用来检测项目中package.json声明了，但未使用的依赖。或者未直接声明，但是使用的依赖。
8>竞态问题。vue2写了一个mixin来处理。
项目：
1>勤务
排班：
任务：
监督纠偏：
勤务检查：
统计：
gis直观检查：
2>慧车
智慧搜车：
关系图谱：
设备管理：

4.日常需求的流程
1>需求/产品 与客户对接，确认需求，出原型
2>研发参与讨论技术可行性，评估难度，时间
任务下发；jenkins;分支管理
3>UI设计;后端、前端开始做
4>还原设计稿
5>前后端联调
6>自测->提测（jenkins）
7>产品做上线前验证
8>发包

6.前端异常监控
1.sentry
2.webfunny

7.开源
组件属性不生效；快捷键esc导致所有弹窗一起被关闭；样式、旧版本属性兼容处理。
useExternal失去引用时，继续存在。

8.从0到1搭建一个项目框架，考虑哪些东西

                                                                                           