1.typescript优缺点
优点：1>编译过程中可以提前发现BUG 2>类型提示+插件支持，极大提升了开发效率
缺点：1>不是真正的静态类型，可以用any类型，最终变为AnyScript 2>学习成本 3>多了一个编译为js的过程
2.枚举类型；编译后是什么样子的
enum AAA{B}
编译后：
var AAA;
(function(AAA){
    AAA[AAA['B']=0]='B'
})(AAA||AAA={})
3.declare关键字
declare告诉编译器，某个类型或者变量是存在的。
使用场景，用于在ts项目中使用js库
1>import X from 'x'会报错，X这个module不存在，这时候可以在.d.ts文件中declare module 'X';
2>使用某个全局变量，直接使用会报错。通过declare const a: any;这样就可以使用全局变量a了。

4.is关键字
用来创建类型保护。
function isString(a: any): a is string {

};调用isString不光能返回true/false，还能在true分支下，默认a是string类型，可以直接调用string的方法。

5.infer关键字,条件类型及分发条件类型
用来在条件类型中提取类型，并赋值给一个变量，在true分支中可以使用这个变量。
条件类型使用extends来申明，分发条件类型发生在，在条件类型中使用联合类型，此时适用于分配律
type Exclude<T, U> = T extends U ? never : T
---------
type MyUnion = 'a' | 'b' | 'c';
type ExcludedType = Exclude<MyUnion, 'b'>;

// ExcludedType: 'a' | 'c'
---------
type Parameters<T extends (...args: any) => any> =  T extends (...args: infer P) => any ? P : never

6.type和interface
同：1>都可以用来表示函数、对象的类型 2>都可以扩展
异：1>扩展方式不同，type使用&,interface使用extends。且'&'可以重写属性，'extends'不可以重写属性。
    2>type不可以重名，interface可以重名(自动合并)
    3>type可以申明基础类型别名、元组类型、联合类型而interface不行

7.索引签名
interface A {
    [key: string]: string
}

8.操作符
1>keyof
对对象使用，返回对象所有key组合起来的联合类型。如果对象有一个string类型的索引签名，返回string|number
    
2>typeof；ts和js的typeof有何区别
typeof用来返回一个变量，或者变量属性的类型。
区别：
1>范围不同，ts中只可以对变量，及变量的属性使用。js中可以对'fn()'使用。
2>js中返回string，ts中返回更为具体的类型。

9.工具类型
1>Partial: 所有T的属性可选
type Partial<T> = {
    [P in keyof T]?: T[P]
}

2>Required：所有T的属性必选
type Required<T> = {
    [P in keyof T]-?: T[P]
}

3>Readonly： 所有T的属性只读
type Readonly<T> = {
    readonly [P in keyof T]: T[P]
}

4>Record：创建一个对象类型，key来自于K的每一项，value类型是T
type Record<K extends keyof any,T> = {
    [P in K]: T
}

5>Pick: K是一个联合类型，且必须是keyof T的子集。创建了一个对象类型，以K中的值为key。
type Pick<T, K extends keyof T> = {
    [P in K]: T[P]
}

6>Exclude: 从T中剔除，符合U的类型。
type Exclude<T, U> = T extends U ? never : T
举例：type A = 'a' | 'b' | 'c';type B = 'a' | 'b' | 'd'
type C = Exclude<A, B>;相当于type C = 'c'

7>Extract: 从T中选出，符合U的类型。
type Extract<T, U>= T extends U ? T : never
举例：type A = 'a' | 'b' | 'c';type B = 'a' | 'b' | 'd'
type C = Extract<A, B>;相当于type C = 'a' | 'b'

8>Omit<T,K>：用于从T中过滤掉K这个联合类型中出现的属性
type Omit<T, K extends keyof any> = Pick<T, Exclude<keyof T, K>>
举例：type A = {a:string,b: number, c: symbol};type B = 'a' | 'c';
type C = Omit<A, B>;相当于type C = {b: number}

9>NonNullable<T>
type NonNullable<T> = T &{}

10>Parameters<T>: 将函数的所有参数类型，转为一个元组类型
type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never
举例：type A = (a: string, b:string) => string; type B = Parameters<A>
相当于type B = [a:string,b:string]

11>ReturnType<T>: 获取函数的返回值类型
type ReturnType<T extends (...args: any) => any>  = T extends (...args: any) => infer R ? R : any
举例：type A = (a: string, b:string) => string; type B = ReturnType<A>
相当于type B = string

12>字面量类型：变量只可以是特定的字面量，'a'|'b'|'c'

13>协变
是指在类型系统中，子类型可以赋值给父类型。这意味着在类型层次结构中，如果 B 是 A 的子类型，那么 B 类型的值可以赋值给 A 类型的变量。
通常用于函数的返回类型、数组类型等。

14>逆变
父类型可以赋值给子类型，通常用于函数的参数类型。