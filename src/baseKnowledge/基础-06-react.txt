1.useLayoutEffect和useEffect区别
useLayoutEffect 是同步执行的钩子函数，在 DOM 更新后(浏览器绘制前)立即执行，会阻塞浏览器的绘制过程；[使用场景：需要动态计算位置的地方，避免闪烁的情况]
useEffect 是异步执行的钩子函数，在浏览器完成绘制后延迟执行，不会阻塞浏览器的绘制过程。

2.react生命周期
1>初次挂载时：constructor->getDerivedStateFromProps->render->componentDidMount
2>组件更新时：getDerivedStateFromProps->shouldComponentUpdate->render->getSnapShotBeforeUpdate->componentDidUpdate
3>组件卸载时：componentWillUnmount
4>发生错误时：getDerivedStateFromError->componentDidCatch

如果是考虑父子组件
1>初次挂载时：父constructor->父getDerivedStateFromProps->父render->子constructor->子getDerivedStateFromProps->子render->子componentDidMount->父componentDidMount
2>组件更新时：父getDerivedStateFromProps->父shouldComponentUpdate->父render->子getDerivedStateFromProps->子shouldComponentUpdate->子render->子getSnapShotBeforeUpdate->子componentDidUpdate->父getSnapShotBeforeUpdate->父componentDidUpdate
3>组件卸载时：子componentWillUnmount->父componentWillUnmount

3.react17/18新特性
.react17--“无新特性”
1>新的jsx编译，原本是React.createElement，所以需要手动引入import React from 'react';现在是通过@babel/plugin-transform-react-jsx中自动引入react/jsx-runtime的jsx函数进行转换。
2>事件由原来的委托到document，改为委托到rootElemnt
React16.x 原生事件捕获+冒泡->合成事件捕获+冒泡【W形状】；本质是通过事件委托，所以合成事件取消冒泡，还是会触发document上原生click事件。
react17,18,原生事件捕获->合成事件捕获+冒泡->原生事件冒泡【V形状】
3>取消事件池【现在js引擎优化，创建销毁对象开销可忽略。解决之前setTimeout中访问事件对象，为空的问题，因为事件对象已经被回收了。react16中可以通过调用event.persist()来阻止合成时间对象被回收】
4>forwardRef和memo包裹的组件返回undefined不会报错，现在也改为会报错。不允许返回undefined。防止用户忘记写return;
.react18
1>自动批处理
2>并发特性(lanes车道模型)/过渡更新 (渲染可中断)---优先队列&多级缓冲
几个新的api:useDeferredValue&useTransition
3>新的严格模式；开发环境会自动卸载又重新挂载组件（第二次挂载时复用之前的状态）以提前发现可能存在的问题
4>允许组件渲染undefined

4.react组件性能优化
1>使用新的api来利用并发特性，避免页面卡顿
useDeferredValue(使用Object.is进行比较，延迟更新UI的某些部分),useTransition来延迟更新，避免页面卡顿。 【echarts,多轨迹地图动效卡顿时】
2>使用useMemo（可以量化，>1ms，再缓存结果）,useCallback,memo来避免重复渲染
3>尽量减少不必要的useState的使用。
4>尽量减少不必要的useEffect的使用：不必使用useEffect来转换渲染所需要的数据、不必使用useEffect来处理用户事件(点击等操作)
5>list渲染，提供合适的key(稳定的key)
6>大列表虚拟滚动
7>使用React.lazy&Suspense来按需加载组件，从而减少初始加载时间
使用由useDeferredValue,useTransition触发的渲染，不会触发Suspense

5.redux与mobx区别
1>redux数据不可变，历史操作可回溯。mobx数据可变，通过Proxy和Reflect来监听变化。
2>redux单一数据源，全局只存在一份store。mobx不是单一数据源，可以存在多个store
3>redux不支持异步操作，需要借助于中间件。mobx支持异步操作。

6.父子组件通信方式
1>props或者render props(也称为渲染属性，子组件数据往上抛。)
2>context
3>ref+forwardRef+useImperativeHandle。最新的react19已经不需要forwardRef包裹了
4>redux等状态管理库

7.fiber架构
1>出现的目的是解决组件树庞大，渲染不可中断的问题（时间分片(增量渲染)、车道模型）；
2>本质上是虚拟dom的一种具体实现，是链表树，具有child,sibling,return等属性。深度优先
4>参与协调及渲染阶段。

8.react渲染原理及架构
三层：调度器、协调器、渲染器
调度器：实现了requestIdleCallback的垫片，用来检测浏览器是否有剩余时间。lanes车道模型，用来设置任务的优先级
协调器：会调用调度器的函数，确实有剩余时间，才会继续执行。主要工作是对比current fiber与jsx来生成workInProgress fiber.
渲染器：根据workInProgress fiber中打的标签，更新现有DOM。将current fiber指向workInProgressFiber
前两层的工作可以中断，可能原因有：没有剩余时间或者是更高优先级的任务进来了。

9.diff算法
发生在协调器中。作用是用来比较current fiber与jsx来生成workInProgress fiber.
比较两棵树算法复杂度高，所以diff算法做了几个提前假设，将复杂度变为O(n)：
1>只对同一层的元素进行比较2>两个不同key或者不同类型的元素会产生不同类型的树3>可以通过key进行优化

jsx节点一般这几种情况：单节点、多节点（是相对于jsx的同级别元素的数量来判断的）
是否可复用：key相同且type相同
对于单节点：遍历对应的current fiber及其兄弟节点。
           判断current fiber上是否有可复用的节点，有的话，打上更新的标记。
           不可复用的话，有两种情况：1>key不一致，将该fiber标记为删除 2>key一致type不一致，将该fiber及剩余的兄弟fiber都标记为删除
对于多节点：同时遍历jsx及current fiber。
           第一轮遍历处理更新的情况，因为大多数情况都是更新。
           第一轮遍历规则：如果key和type一致就继续遍历，否则跳出。
           第一轮遍历的几种情况：1>两棵树同时遍历完，这是最理想情况，说明全部可以复用，不需要第二轮遍历了 
                               2>jsx先遍历完，current fiber还没有遍历完。第二轮遍历剩余的current fiber，并都标记为删除 
                               3>current fiber遍历完，jsx还没有遍历完。第二轮遍历剩余的jsx，并创建新的fiber
                               4>key或者type不一致时，跳出第一轮循环。即jsx和current fiber都有剩余。
            
            对于jsx及current fiber都没有遍历完的处理办法（可能存在移动的节点）：
                为了能够快速找到key对应的fiber,将current fiber都放到一个对象中去。
                然后遍历剩余的jsx，可能存在两种情况，一个是存在对应key的fiber，则走位置移动流程。一个是不存在对应key的，则走创建流程。
                都处理完后，如果current fiber还有剩余，则将剩余的都标记为删除。
                标记移动算法：
                    最后一个可复用的节点在current fiber中的位置索引---使用lastPlaceIndex表示
                    遍历jsx，如果找到对应key的fiber---用oldIndex表示该可复用节点在current fiber中的索引位置
                    如果oldIndex<lastPlaceIndex，代表本次更新该节点，需要向右移动。
                    如果oldIndex>=lastPlaceIndex, 则lastPlaceIndex=oldIndex。
           
10.react中setXXX是同步还是异步的
"异步"，"同步" 其实是批处理的意思。
并发模式下：都是异步的，多个setXXX只触发了一次更新
传统模式下：合成事件、useEffect等react可控的范围内，是异步的。setTimeout,setInterval,Promise或者原生事件下是同步的。

11.react19新特性
1>useOptimistic：可以帮助你更乐观地更新用户界面,立即显示optimisticItem。异步任务出错后，自动切回currentItem
2>useActionState:配合表单，提交表单使用的。
3>useFormStatus:返回父级form的状态信息
4>use，在获取promise时暂停继续往下渲染。直到promise结束。也可以用来获取context;不支持获取当前组件渲染中创建的promise;
可以在循环或者条件判断中使用use
5>服务器组件
6>不再需要forwardRef来包裹子组件，直接从props中获取ref就行
7>提供者，可以不再使用<Context.Provider value={xxx}></Context.Provider>直接用<Context value={xx} ></Context>
8>ref支持清理函数
9>useDeferredValue增加了一个初始值选项。
10>支持文档元数据
11>支持样式表
12>支持异步脚本
13>支持预加载资源
14>更好的错误提示。
15>useEffectEvent: 将useEffect中非响应式逻辑提取出来，避免useEffect加入没必要的依赖项。【实验性的API】