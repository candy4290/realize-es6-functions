1.单例模式
使用场景路由切换后，将之前一个页面的所有xhr请求中断。
使用单例模式来创建全局唯一的AbortController实例，以便共用及一次性取消全部请求。
用闭包来实现单例模式；
export const getGlobalAbort = (function () {
  let abort;
  return () => {
    if (!abort || abort.signal.aborted) {
      abort = new AbortController();
    }
    return abort;
  };
})();

2.适配器模式
使用场景：语法兼容、数据结构兼容。目的是尽量不需要原有代码写法。（接口mock后，实际接口改动了返回体。前端写一个适配函数来解决）

3.观察者模式VS发布订阅模式
1>前者是一对多，后者是多对多
2>前者直接由发布者来通知订阅者，后者由消息中心来

发布订阅模式，vue的EventBus
观察者模式，特定状态监听~~


3.策略模式
定义一系列算法，并封装起来，使他们可以相互替换。js的{}，自带了这个功能。

使用场景：表单规则校验（邮箱、身份证、姓名等等）


4.代理模式
通过代理对象来进行实际操作。
场景：imgload,图片出来之前展示loading符号。使用缓存。