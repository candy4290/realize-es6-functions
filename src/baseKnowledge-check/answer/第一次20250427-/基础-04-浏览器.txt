1.meta标签的几种用法
元数据元素
1>如果设置了name,则表示文档级别的元数据
2>如果设置了charset，则是一个字符集申明，告诉文档使用了哪种字符编码。
3>如果设置了http-equiv,则是编译指令，与类似命名的http头部效果一致。

2.DomContentLoaded与load区别；
DomContentLoaded在HTML文档完全解析及所有延迟脚本执行之后触发，
不用等待异步脚本、图片、子框架等其他内容加载完。

load事件需要等待所有依赖资源如样式表和图片都加载完才触发。

3.scritp标签async与defer有什么区别
执行时机&执行顺序的区别
1>async异步脚步，加载完执行，无法保证顺序，执行期间阻塞解析。
2>defer延迟脚本，加载完，等页面解析完，在按照顺序执行。
只对外联脚本生效，同时设置，async生效

4.link标签引入外部css是否会阻塞页面解析、渲染；是否会阻塞js下载及执行。
不阻塞解析，阻塞渲染。解决方案：<!-- 非阻塞（需要配合 onload） -->
<link rel="preload" href="style.css" as="style" onload="this.rel='stylesheet'">
会阻塞后续的同步js脚步

5.从输入URL到页面显示发生了什么【HTTP】
1>DNS解析
2>TCP握手，建立连接
3>返回数据
4>解析
    DOM树
        逐行解析，将文档分解为一系列的标记tokens
        根据标记构建dom节点，链接到树形结构中。
        遇到css/js，调用对应的解析器。
    CSSOM树
    渲染树
5>渲染：布局->绘制

6.回流（重排）与重绘，如何减少回流
回流必导致重绘，重绘未必会回流。
减少回流：
1>class替换 
2>cssText 
3>绝对定位脱离文档流（还是会回流，代价小点而已）
4>使用transform来，这样不会回流，并开启了GPU加速

7.JSONP跨域原理
1>script可以加载跨域脚本
2>返回的文本当做js直接自动加载。

8.性能指标
TTFB（time to first byte），首字节时间，浏览器收到服务器响应的第一个字节所花费的时间。
FP（First Paint），首次渲染时间
FCP（first contentful paint）,首次内容渲染时间
LCP（largest contentful paint），最大内容块绘制到屏幕上的时间。
FID，首次输入延迟时间，用户首次与页面进行交互（点击按钮、输入框等）后，页面响应交互的时间
TTI（time to interactive）,首次可交互时间

9.字体未加载完时，text文本是否会显示出来
font-display:block/swap

10.如果cookie 没有设置 maxage， 那么这一条 cookie 失效时间改怎么算
默认是会话cookie，浏览器完全关闭的时候失效

11.Attribute与Property区别

12.同源策略、

13.XSS
1>转义
2>cookie设置为HttpOnly
3>csp---限制执行脚本的来源

14.XSRF
1>xsrf Token
2>Cookie设置SameSite
3>referer,origin检查，限制来源